# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wazo_appgateway_client.configuration import Configuration


class DialplanCEP(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'app_data': 'str',
        'app_name': 'str',
        'context': 'str',
        'exten': 'str',
        'priority': 'int'
    }

    attribute_map = {
        'app_data': 'app_data',
        'app_name': 'app_name',
        'context': 'context',
        'exten': 'exten',
        'priority': 'priority'
    }

    def __init__(self, app_data=None, app_name=None, context=None, exten=None, priority=None, local_vars_configuration=None):  # noqa: E501
        """DialplanCEP - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._app_data = None
        self._app_name = None
        self._context = None
        self._exten = None
        self._priority = None
        self.discriminator = None

        self.app_data = app_data
        self.app_name = app_name
        self.context = context
        self.exten = exten
        self.priority = priority

    @property
    def app_data(self):
        """Gets the app_data of this DialplanCEP.  # noqa: E501

        Parameter of current dialplan application  # noqa: E501

        :return: The app_data of this DialplanCEP.  # noqa: E501
        :rtype: str
        """
        return self._app_data

    @app_data.setter
    def app_data(self, app_data):
        """Sets the app_data of this DialplanCEP.

        Parameter of current dialplan application  # noqa: E501

        :param app_data: The app_data of this DialplanCEP.  # noqa: E501
        :type app_data: str
        """
        if self.local_vars_configuration.client_side_validation and app_data is None:  # noqa: E501
            raise ValueError("Invalid value for `app_data`, must not be `None`")  # noqa: E501

        self._app_data = app_data

    @property
    def app_name(self):
        """Gets the app_name of this DialplanCEP.  # noqa: E501

        Name of current dialplan application  # noqa: E501

        :return: The app_name of this DialplanCEP.  # noqa: E501
        :rtype: str
        """
        return self._app_name

    @app_name.setter
    def app_name(self, app_name):
        """Sets the app_name of this DialplanCEP.

        Name of current dialplan application  # noqa: E501

        :param app_name: The app_name of this DialplanCEP.  # noqa: E501
        :type app_name: str
        """
        if self.local_vars_configuration.client_side_validation and app_name is None:  # noqa: E501
            raise ValueError("Invalid value for `app_name`, must not be `None`")  # noqa: E501

        self._app_name = app_name

    @property
    def context(self):
        """Gets the context of this DialplanCEP.  # noqa: E501

        Context in the dialplan  # noqa: E501

        :return: The context of this DialplanCEP.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this DialplanCEP.

        Context in the dialplan  # noqa: E501

        :param context: The context of this DialplanCEP.  # noqa: E501
        :type context: str
        """
        if self.local_vars_configuration.client_side_validation and context is None:  # noqa: E501
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def exten(self):
        """Gets the exten of this DialplanCEP.  # noqa: E501

        Extension in the dialplan  # noqa: E501

        :return: The exten of this DialplanCEP.  # noqa: E501
        :rtype: str
        """
        return self._exten

    @exten.setter
    def exten(self, exten):
        """Sets the exten of this DialplanCEP.

        Extension in the dialplan  # noqa: E501

        :param exten: The exten of this DialplanCEP.  # noqa: E501
        :type exten: str
        """
        if self.local_vars_configuration.client_side_validation and exten is None:  # noqa: E501
            raise ValueError("Invalid value for `exten`, must not be `None`")  # noqa: E501

        self._exten = exten

    @property
    def priority(self):
        """Gets the priority of this DialplanCEP.  # noqa: E501

        Priority in the dialplan  # noqa: E501

        :return: The priority of this DialplanCEP.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this DialplanCEP.

        Priority in the dialplan  # noqa: E501

        :param priority: The priority of this DialplanCEP.  # noqa: E501
        :type priority: int
        """
        if self.local_vars_configuration.client_side_validation and priority is None:  # noqa: E501
            raise ValueError("Invalid value for `priority`, must not be `None`")  # noqa: E501

        self._priority = priority

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DialplanCEP):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DialplanCEP):
            return True

        return self.to_dict() != other.to_dict()
