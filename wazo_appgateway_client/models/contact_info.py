# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wazo_appgateway_client.configuration import Configuration


class ContactInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aor': 'str',
        'contact_status': 'str',
        'roundtrip_usec': 'str',
        'uri': 'str'
    }

    attribute_map = {
        'aor': 'aor',
        'contact_status': 'contact_status',
        'roundtrip_usec': 'roundtrip_usec',
        'uri': 'uri'
    }

    def __init__(self, aor=None, contact_status=None, roundtrip_usec=None, uri=None, local_vars_configuration=None):  # noqa: E501
        """ContactInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aor = None
        self._contact_status = None
        self._roundtrip_usec = None
        self._uri = None
        self.discriminator = None

        self.aor = aor
        self.contact_status = contact_status
        if roundtrip_usec is not None:
            self.roundtrip_usec = roundtrip_usec
        self.uri = uri

    @property
    def aor(self):
        """Gets the aor of this ContactInfo.  # noqa: E501

        The Address of Record this contact belongs to.  # noqa: E501

        :return: The aor of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._aor

    @aor.setter
    def aor(self, aor):
        """Sets the aor of this ContactInfo.

        The Address of Record this contact belongs to.  # noqa: E501

        :param aor: The aor of this ContactInfo.  # noqa: E501
        :type aor: str
        """
        if self.local_vars_configuration.client_side_validation and aor is None:  # noqa: E501
            raise ValueError("Invalid value for `aor`, must not be `None`")  # noqa: E501

        self._aor = aor

    @property
    def contact_status(self):
        """Gets the contact_status of this ContactInfo.  # noqa: E501

        The current status of the contact.  # noqa: E501

        :return: The contact_status of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._contact_status

    @contact_status.setter
    def contact_status(self, contact_status):
        """Sets the contact_status of this ContactInfo.

        The current status of the contact.  # noqa: E501

        :param contact_status: The contact_status of this ContactInfo.  # noqa: E501
        :type contact_status: str
        """
        if self.local_vars_configuration.client_side_validation and contact_status is None:  # noqa: E501
            raise ValueError("Invalid value for `contact_status`, must not be `None`")  # noqa: E501

        self._contact_status = contact_status

    @property
    def roundtrip_usec(self):
        """Gets the roundtrip_usec of this ContactInfo.  # noqa: E501

        Current round trip time, in microseconds, for the contact.  # noqa: E501

        :return: The roundtrip_usec of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._roundtrip_usec

    @roundtrip_usec.setter
    def roundtrip_usec(self, roundtrip_usec):
        """Sets the roundtrip_usec of this ContactInfo.

        Current round trip time, in microseconds, for the contact.  # noqa: E501

        :param roundtrip_usec: The roundtrip_usec of this ContactInfo.  # noqa: E501
        :type roundtrip_usec: str
        """

        self._roundtrip_usec = roundtrip_usec

    @property
    def uri(self):
        """Gets the uri of this ContactInfo.  # noqa: E501

        The location of the contact.  # noqa: E501

        :return: The uri of this ContactInfo.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ContactInfo.

        The location of the contact.  # noqa: E501

        :param uri: The uri of this ContactInfo.  # noqa: E501
        :type uri: str
        """
        if self.local_vars_configuration.client_side_validation and uri is None:  # noqa: E501
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContactInfo):
            return True

        return self.to_dict() != other.to_dict()
