# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wazo_appgateway_client.configuration import Configuration


class Bridge(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bridge_class': 'str',
        'bridge_type': 'str',
        'channels': 'list[str]',
        'creationtime': 'date',
        'creator': 'str',
        'id': 'str',
        'name': 'str',
        'technology': 'str',
        'video_mode': 'str',
        'video_source_id': 'str'
    }

    attribute_map = {
        'bridge_class': 'bridge_class',
        'bridge_type': 'bridge_type',
        'channels': 'channels',
        'creationtime': 'creationtime',
        'creator': 'creator',
        'id': 'id',
        'name': 'name',
        'technology': 'technology',
        'video_mode': 'video_mode',
        'video_source_id': 'video_source_id'
    }

    def __init__(self, bridge_class=None, bridge_type=None, channels=None, creationtime=None, creator=None, id=None, name=None, technology=None, video_mode=None, video_source_id=None, local_vars_configuration=None):  # noqa: E501
        """Bridge - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bridge_class = None
        self._bridge_type = None
        self._channels = None
        self._creationtime = None
        self._creator = None
        self._id = None
        self._name = None
        self._technology = None
        self._video_mode = None
        self._video_source_id = None
        self.discriminator = None

        self.bridge_class = bridge_class
        self.bridge_type = bridge_type
        self.channels = channels
        self.creationtime = creationtime
        self.creator = creator
        self.id = id
        self.name = name
        self.technology = technology
        if video_mode is not None:
            self.video_mode = video_mode
        if video_source_id is not None:
            self.video_source_id = video_source_id

    @property
    def bridge_class(self):
        """Gets the bridge_class of this Bridge.  # noqa: E501

        Bridging class  # noqa: E501

        :return: The bridge_class of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._bridge_class

    @bridge_class.setter
    def bridge_class(self, bridge_class):
        """Sets the bridge_class of this Bridge.

        Bridging class  # noqa: E501

        :param bridge_class: The bridge_class of this Bridge.  # noqa: E501
        :type bridge_class: str
        """
        if self.local_vars_configuration.client_side_validation and bridge_class is None:  # noqa: E501
            raise ValueError("Invalid value for `bridge_class`, must not be `None`")  # noqa: E501

        self._bridge_class = bridge_class

    @property
    def bridge_type(self):
        """Gets the bridge_type of this Bridge.  # noqa: E501

        Type of bridge technology  # noqa: E501

        :return: The bridge_type of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._bridge_type

    @bridge_type.setter
    def bridge_type(self, bridge_type):
        """Sets the bridge_type of this Bridge.

        Type of bridge technology  # noqa: E501

        :param bridge_type: The bridge_type of this Bridge.  # noqa: E501
        :type bridge_type: str
        """
        if self.local_vars_configuration.client_side_validation and bridge_type is None:  # noqa: E501
            raise ValueError("Invalid value for `bridge_type`, must not be `None`")  # noqa: E501

        self._bridge_type = bridge_type

    @property
    def channels(self):
        """Gets the channels of this Bridge.  # noqa: E501

        Ids of channels participating in this bridge  # noqa: E501

        :return: The channels of this Bridge.  # noqa: E501
        :rtype: list[str]
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this Bridge.

        Ids of channels participating in this bridge  # noqa: E501

        :param channels: The channels of this Bridge.  # noqa: E501
        :type channels: list[str]
        """
        if self.local_vars_configuration.client_side_validation and channels is None:  # noqa: E501
            raise ValueError("Invalid value for `channels`, must not be `None`")  # noqa: E501

        self._channels = channels

    @property
    def creationtime(self):
        """Gets the creationtime of this Bridge.  # noqa: E501

        Timestamp when bridge was created  # noqa: E501

        :return: The creationtime of this Bridge.  # noqa: E501
        :rtype: date
        """
        return self._creationtime

    @creationtime.setter
    def creationtime(self, creationtime):
        """Sets the creationtime of this Bridge.

        Timestamp when bridge was created  # noqa: E501

        :param creationtime: The creationtime of this Bridge.  # noqa: E501
        :type creationtime: date
        """
        if self.local_vars_configuration.client_side_validation and creationtime is None:  # noqa: E501
            raise ValueError("Invalid value for `creationtime`, must not be `None`")  # noqa: E501

        self._creationtime = creationtime

    @property
    def creator(self):
        """Gets the creator of this Bridge.  # noqa: E501

        Entity that created the bridge  # noqa: E501

        :return: The creator of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this Bridge.

        Entity that created the bridge  # noqa: E501

        :param creator: The creator of this Bridge.  # noqa: E501
        :type creator: str
        """
        if self.local_vars_configuration.client_side_validation and creator is None:  # noqa: E501
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def id(self):
        """Gets the id of this Bridge.  # noqa: E501

        Unique identifier for this bridge  # noqa: E501

        :return: The id of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Bridge.

        Unique identifier for this bridge  # noqa: E501

        :param id: The id of this Bridge.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Bridge.  # noqa: E501

        Name the creator gave the bridge  # noqa: E501

        :return: The name of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bridge.

        Name the creator gave the bridge  # noqa: E501

        :param name: The name of this Bridge.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def technology(self):
        """Gets the technology of this Bridge.  # noqa: E501

        Name of the current bridging technology  # noqa: E501

        :return: The technology of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._technology

    @technology.setter
    def technology(self, technology):
        """Sets the technology of this Bridge.

        Name of the current bridging technology  # noqa: E501

        :param technology: The technology of this Bridge.  # noqa: E501
        :type technology: str
        """
        if self.local_vars_configuration.client_side_validation and technology is None:  # noqa: E501
            raise ValueError("Invalid value for `technology`, must not be `None`")  # noqa: E501

        self._technology = technology

    @property
    def video_mode(self):
        """Gets the video_mode of this Bridge.  # noqa: E501

        The video mode the bridge is using. One of 'none', 'talker', or 'single'.  # noqa: E501

        :return: The video_mode of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._video_mode

    @video_mode.setter
    def video_mode(self, video_mode):
        """Sets the video_mode of this Bridge.

        The video mode the bridge is using. One of 'none', 'talker', or 'single'.  # noqa: E501

        :param video_mode: The video_mode of this Bridge.  # noqa: E501
        :type video_mode: str
        """

        self._video_mode = video_mode

    @property
    def video_source_id(self):
        """Gets the video_source_id of this Bridge.  # noqa: E501

        The ID of the channel that is the source of video in this bridge, if one exists.  # noqa: E501

        :return: The video_source_id of this Bridge.  # noqa: E501
        :rtype: str
        """
        return self._video_source_id

    @video_source_id.setter
    def video_source_id(self, video_source_id):
        """Sets the video_source_id of this Bridge.

        The ID of the channel that is the source of video in this bridge, if one exists.  # noqa: E501

        :param video_source_id: The video_source_id of this Bridge.  # noqa: E501
        :type video_source_id: str
        """

        self._video_source_id = video_source_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bridge):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Bridge):
            return True

        return self.to_dict() != other.to_dict()
