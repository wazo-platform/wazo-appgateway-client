# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wazo_appgateway_client.configuration import Configuration


class ConfigInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'default_language': 'str',
        'max_channels': 'int',
        'max_load': 'float',
        'max_open_files': 'int',
        'name': 'str',
        'setid': 'SetId'
    }

    attribute_map = {
        'default_language': 'default_language',
        'max_channels': 'max_channels',
        'max_load': 'max_load',
        'max_open_files': 'max_open_files',
        'name': 'name',
        'setid': 'setid'
    }

    def __init__(self, default_language=None, max_channels=None, max_load=None, max_open_files=None, name=None, setid=None, local_vars_configuration=None):  # noqa: E501
        """ConfigInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._default_language = None
        self._max_channels = None
        self._max_load = None
        self._max_open_files = None
        self._name = None
        self._setid = None
        self.discriminator = None

        self.default_language = default_language
        if max_channels is not None:
            self.max_channels = max_channels
        if max_load is not None:
            self.max_load = max_load
        if max_open_files is not None:
            self.max_open_files = max_open_files
        self.name = name
        self.setid = setid

    @property
    def default_language(self):
        """Gets the default_language of this ConfigInfo.  # noqa: E501

        Default language for media playback.  # noqa: E501

        :return: The default_language of this ConfigInfo.  # noqa: E501
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language):
        """Sets the default_language of this ConfigInfo.

        Default language for media playback.  # noqa: E501

        :param default_language: The default_language of this ConfigInfo.  # noqa: E501
        :type default_language: str
        """
        if self.local_vars_configuration.client_side_validation and default_language is None:  # noqa: E501
            raise ValueError("Invalid value for `default_language`, must not be `None`")  # noqa: E501

        self._default_language = default_language

    @property
    def max_channels(self):
        """Gets the max_channels of this ConfigInfo.  # noqa: E501

        Maximum number of simultaneous channels.  # noqa: E501

        :return: The max_channels of this ConfigInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_channels

    @max_channels.setter
    def max_channels(self, max_channels):
        """Sets the max_channels of this ConfigInfo.

        Maximum number of simultaneous channels.  # noqa: E501

        :param max_channels: The max_channels of this ConfigInfo.  # noqa: E501
        :type max_channels: int
        """

        self._max_channels = max_channels

    @property
    def max_load(self):
        """Gets the max_load of this ConfigInfo.  # noqa: E501

        Maximum load avg on system.  # noqa: E501

        :return: The max_load of this ConfigInfo.  # noqa: E501
        :rtype: float
        """
        return self._max_load

    @max_load.setter
    def max_load(self, max_load):
        """Sets the max_load of this ConfigInfo.

        Maximum load avg on system.  # noqa: E501

        :param max_load: The max_load of this ConfigInfo.  # noqa: E501
        :type max_load: float
        """

        self._max_load = max_load

    @property
    def max_open_files(self):
        """Gets the max_open_files of this ConfigInfo.  # noqa: E501

        Maximum number of open file handles (files, sockets).  # noqa: E501

        :return: The max_open_files of this ConfigInfo.  # noqa: E501
        :rtype: int
        """
        return self._max_open_files

    @max_open_files.setter
    def max_open_files(self, max_open_files):
        """Sets the max_open_files of this ConfigInfo.

        Maximum number of open file handles (files, sockets).  # noqa: E501

        :param max_open_files: The max_open_files of this ConfigInfo.  # noqa: E501
        :type max_open_files: int
        """

        self._max_open_files = max_open_files

    @property
    def name(self):
        """Gets the name of this ConfigInfo.  # noqa: E501

        Asterisk system name.  # noqa: E501

        :return: The name of this ConfigInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConfigInfo.

        Asterisk system name.  # noqa: E501

        :param name: The name of this ConfigInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def setid(self):
        """Gets the setid of this ConfigInfo.  # noqa: E501


        :return: The setid of this ConfigInfo.  # noqa: E501
        :rtype: SetId
        """
        return self._setid

    @setid.setter
    def setid(self, setid):
        """Sets the setid of this ConfigInfo.


        :param setid: The setid of this ConfigInfo.  # noqa: E501
        :type setid: SetId
        """
        if self.local_vars_configuration.client_side_validation and setid is None:  # noqa: E501
            raise ValueError("Invalid value for `setid`, must not be `None`")  # noqa: E501

        self._setid = setid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ConfigInfo):
            return True

        return self.to_dict() != other.to_dict()
