# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from wazo_appgateway_client.configuration import Configuration


class Playback(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'language': 'str',
        'media_uri': 'str',
        'next_media_uri': 'str',
        'state': 'str',
        'target_uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'language': 'language',
        'media_uri': 'media_uri',
        'next_media_uri': 'next_media_uri',
        'state': 'state',
        'target_uri': 'target_uri'
    }

    def __init__(self, id=None, language=None, media_uri=None, next_media_uri=None, state=None, target_uri=None, local_vars_configuration=None):  # noqa: E501
        """Playback - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._language = None
        self._media_uri = None
        self._next_media_uri = None
        self._state = None
        self._target_uri = None
        self.discriminator = None

        self.id = id
        if language is not None:
            self.language = language
        self.media_uri = media_uri
        if next_media_uri is not None:
            self.next_media_uri = next_media_uri
        self.state = state
        self.target_uri = target_uri

    @property
    def id(self):
        """Gets the id of this Playback.  # noqa: E501

        ID for this playback operation  # noqa: E501

        :return: The id of this Playback.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Playback.

        ID for this playback operation  # noqa: E501

        :param id: The id of this Playback.  # noqa: E501
        :type id: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def language(self):
        """Gets the language of this Playback.  # noqa: E501

        For media types that support multiple languages, the language requested for playback.  # noqa: E501

        :return: The language of this Playback.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Playback.

        For media types that support multiple languages, the language requested for playback.  # noqa: E501

        :param language: The language of this Playback.  # noqa: E501
        :type language: str
        """

        self._language = language

    @property
    def media_uri(self):
        """Gets the media_uri of this Playback.  # noqa: E501

        The URI for the media currently being played back.  # noqa: E501

        :return: The media_uri of this Playback.  # noqa: E501
        :rtype: str
        """
        return self._media_uri

    @media_uri.setter
    def media_uri(self, media_uri):
        """Sets the media_uri of this Playback.

        The URI for the media currently being played back.  # noqa: E501

        :param media_uri: The media_uri of this Playback.  # noqa: E501
        :type media_uri: str
        """
        if self.local_vars_configuration.client_side_validation and media_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `media_uri`, must not be `None`")  # noqa: E501

        self._media_uri = media_uri

    @property
    def next_media_uri(self):
        """Gets the next_media_uri of this Playback.  # noqa: E501

        If a list of URIs is being played, the next media URI to be played back.  # noqa: E501

        :return: The next_media_uri of this Playback.  # noqa: E501
        :rtype: str
        """
        return self._next_media_uri

    @next_media_uri.setter
    def next_media_uri(self, next_media_uri):
        """Sets the next_media_uri of this Playback.

        If a list of URIs is being played, the next media URI to be played back.  # noqa: E501

        :param next_media_uri: The next_media_uri of this Playback.  # noqa: E501
        :type next_media_uri: str
        """

        self._next_media_uri = next_media_uri

    @property
    def state(self):
        """Gets the state of this Playback.  # noqa: E501

        Current state of the playback operation.  # noqa: E501

        :return: The state of this Playback.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Playback.

        Current state of the playback operation.  # noqa: E501

        :param state: The state of this Playback.  # noqa: E501
        :type state: str
        """
        if self.local_vars_configuration.client_side_validation and state is None:  # noqa: E501
            raise ValueError("Invalid value for `state`, must not be `None`")  # noqa: E501

        self._state = state

    @property
    def target_uri(self):
        """Gets the target_uri of this Playback.  # noqa: E501

        URI for the channel or bridge to play the media on  # noqa: E501

        :return: The target_uri of this Playback.  # noqa: E501
        :rtype: str
        """
        return self._target_uri

    @target_uri.setter
    def target_uri(self, target_uri):
        """Sets the target_uri of this Playback.

        URI for the channel or bridge to play the media on  # noqa: E501

        :param target_uri: The target_uri of this Playback.  # noqa: E501
        :type target_uri: str
        """
        if self.local_vars_configuration.client_side_validation and target_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `target_uri`, must not be `None`")  # noqa: E501

        self._target_uri = target_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Playback):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Playback):
            return True

        return self.to_dict() != other.to_dict()
