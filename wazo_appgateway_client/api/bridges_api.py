# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.1.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wazo_appgateway_client.api_client import ApiClient
from wazo_appgateway_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class BridgesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def bridges_bridge_id_add_channel_post(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Add a channel to a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_add_channel_post(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param channel: Ids of channels to add to bridge (required)
        :type channel: list[str]
        :param role: Channel's role in the bridge
        :type role: str
        :param absorb_dtmf: Absorb DTMF coming from this channel, preventing it to pass through to the bridge
        :type absorb_dtmf: bool
        :param mute: Mute audio from this channel, preventing it to pass through to the bridge
        :type mute: bool
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_add_channel_post_with_http_info(bridge_id, channel, **kwargs)  # noqa: E501

    def bridges_bridge_id_add_channel_post_with_http_info(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Add a channel to a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_add_channel_post_with_http_info(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param channel: Ids of channels to add to bridge (required)
        :type channel: list[str]
        :param role: Channel's role in the bridge
        :type role: str
        :param absorb_dtmf: Absorb DTMF coming from this channel, preventing it to pass through to the bridge
        :type absorb_dtmf: bool
        :param mute: Mute audio from this channel, preventing it to pass through to the bridge
        :type mute: bool
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'channel',
            'role',
            'absorb_dtmf',
            'mute',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_add_channel_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_add_channel_post`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if self.api_client.client_side_validation and ('channel' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel` when calling `bridges_bridge_id_add_channel_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []
        if 'channel' in local_var_params and local_var_params['channel'] is not None:  # noqa: E501
            query_params.append(('channel', local_var_params['channel']))  # noqa: E501
            collection_formats['channel'] = 'multi'  # noqa: E501
        if 'role' in local_var_params and local_var_params['role'] is not None:  # noqa: E501
            query_params.append(('role', local_var_params['role']))  # noqa: E501
        if 'absorb_dtmf' in local_var_params and local_var_params['absorb_dtmf'] is not None:  # noqa: E501
            query_params.append(('absorbDTMF', local_var_params['absorb_dtmf']))  # noqa: E501
        if 'mute' in local_var_params and local_var_params['mute'] is not None:  # noqa: E501
            query_params.append(('mute', local_var_params['mute']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/bridges/{bridgeId}/addChannel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_delete(self, bridge_id, **kwargs):  # noqa: E501
        """Shut down a bridge.  # noqa: E501

        If any channels are in this bridge, they will be removed and resume whatever they were doing beforehand.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_delete(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501

    def bridges_bridge_id_delete_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Shut down a bridge.  # noqa: E501

        If any channels are in this bridge, they will be removed and resume whatever they were doing beforehand.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_delete_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/bridges/{bridgeId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_get(self, bridge_id, **kwargs):  # noqa: E501
        """Get bridge details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_get(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Bridge
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_get_with_http_info(bridge_id, **kwargs)  # noqa: E501

    def bridges_bridge_id_get_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Get bridge details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_get_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Bridge, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "Bridge",
        }

        return self.api_client.call_api(
            '/bridges/{bridgeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_moh_delete(self, bridge_id, **kwargs):  # noqa: E501
        """Stop playing music on hold to a bridge.  # noqa: E501

        This will only stop music on hold being played via POST bridges/{bridgeId}/moh.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_moh_delete(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_moh_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501

    def bridges_bridge_id_moh_delete_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Stop playing music on hold to a bridge.  # noqa: E501

        This will only stop music on hold being played via POST bridges/{bridgeId}/moh.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_moh_delete_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_moh_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_moh_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/bridges/{bridgeId}/moh', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_moh_post(self, bridge_id, **kwargs):  # noqa: E501
        """Play music on hold to a bridge or change the MOH class that is playing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_moh_post(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param moh_class: Channel's id
        :type moh_class: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_moh_post_with_http_info(bridge_id, **kwargs)  # noqa: E501

    def bridges_bridge_id_moh_post_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Play music on hold to a bridge or change the MOH class that is playing.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_moh_post_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param moh_class: Channel's id
        :type moh_class: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'moh_class',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_moh_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_moh_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []
        if 'moh_class' in local_var_params and local_var_params['moh_class'] is not None:  # noqa: E501
            query_params.append(('mohClass', local_var_params['moh_class']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/bridges/{bridgeId}/moh', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_play_playback_id_post(self, bridge_id, playback_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_play_playback_id_post(bridge_id, playback_id, media, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param playback_id: Playback ID. (required)
        :type playback_id: str
        :param media: Media URIs to play. (required)
        :type media: list[str]
        :param lang: For sounds, selects language for sound.
        :type lang: str
        :param offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :type offsetms: int
        :param skipms: Number of milliseconds to skip for forward/reverse operations.
        :type skipms: int
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Playback
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_play_playback_id_post_with_http_info(bridge_id, playback_id, media, **kwargs)  # noqa: E501

    def bridges_bridge_id_play_playback_id_post_with_http_info(self, bridge_id, playback_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_play_playback_id_post_with_http_info(bridge_id, playback_id, media, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param playback_id: Playback ID. (required)
        :type playback_id: str
        :param media: Media URIs to play. (required)
        :type media: list[str]
        :param lang: For sounds, selects language for sound.
        :type lang: str
        :param offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :type offsetms: int
        :param skipms: Number of milliseconds to skip for forward/reverse operations.
        :type skipms: int
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Playback, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'playback_id',
            'media',
            'lang',
            'offsetms',
            'skipms',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_play_playback_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_play_playback_id_post`")  # noqa: E501
        # verify the required parameter 'playback_id' is set
        if self.api_client.client_side_validation and ('playback_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['playback_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `playback_id` when calling `bridges_bridge_id_play_playback_id_post`")  # noqa: E501
        # verify the required parameter 'media' is set
        if self.api_client.client_side_validation and ('media' not in local_var_params or  # noqa: E501
                                                        local_var_params['media'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `media` when calling `bridges_bridge_id_play_playback_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501
        if 'playback_id' in local_var_params:
            path_params['playbackId'] = local_var_params['playback_id']  # noqa: E501

        query_params = []
        if 'media' in local_var_params and local_var_params['media'] is not None:  # noqa: E501
            query_params.append(('media', local_var_params['media']))  # noqa: E501
            collection_formats['media'] = 'multi'  # noqa: E501
        if 'lang' in local_var_params and local_var_params['lang'] is not None:  # noqa: E501
            query_params.append(('lang', local_var_params['lang']))  # noqa: E501
        if 'offsetms' in local_var_params and local_var_params['offsetms'] is not None:  # noqa: E501
            query_params.append(('offsetms', local_var_params['offsetms']))  # noqa: E501
        if 'skipms' in local_var_params and local_var_params['skipms'] is not None:  # noqa: E501
            query_params.append(('skipms', local_var_params['skipms']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "Playback",
        }

        return self.api_client.call_api(
            '/bridges/{bridgeId}/play/{playbackId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_play_post(self, bridge_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_play_post(bridge_id, media, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param media: Media URIs to play. (required)
        :type media: list[str]
        :param lang: For sounds, selects language for sound.
        :type lang: str
        :param offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :type offsetms: int
        :param skipms: Number of milliseconds to skip for forward/reverse operations.
        :type skipms: int
        :param playback_id: Playback Id.
        :type playback_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Playback
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_play_post_with_http_info(bridge_id, media, **kwargs)  # noqa: E501

    def bridges_bridge_id_play_post_with_http_info(self, bridge_id, media, **kwargs):  # noqa: E501
        """Start playback of media on a bridge.  # noqa: E501

        The media URI may be any of a number of URI's. Currently sound:, recording:, number:, digits:, characters:, and tone: URI's are supported. This operation creates a playback resource that can be used to control the playback of media (pause, rewind, fast forward, etc.)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_play_post_with_http_info(bridge_id, media, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param media: Media URIs to play. (required)
        :type media: list[str]
        :param lang: For sounds, selects language for sound.
        :type lang: str
        :param offsetms: Number of milliseconds to skip before playing. Only applies to the first URI if multiple media URIs are specified.
        :type offsetms: int
        :param skipms: Number of milliseconds to skip for forward/reverse operations.
        :type skipms: int
        :param playback_id: Playback Id.
        :type playback_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Playback, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'media',
            'lang',
            'offsetms',
            'skipms',
            'playback_id',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_play_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_play_post`")  # noqa: E501
        # verify the required parameter 'media' is set
        if self.api_client.client_side_validation and ('media' not in local_var_params or  # noqa: E501
                                                        local_var_params['media'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `media` when calling `bridges_bridge_id_play_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []
        if 'media' in local_var_params and local_var_params['media'] is not None:  # noqa: E501
            query_params.append(('media', local_var_params['media']))  # noqa: E501
            collection_formats['media'] = 'multi'  # noqa: E501
        if 'lang' in local_var_params and local_var_params['lang'] is not None:  # noqa: E501
            query_params.append(('lang', local_var_params['lang']))  # noqa: E501
        if 'offsetms' in local_var_params and local_var_params['offsetms'] is not None:  # noqa: E501
            query_params.append(('offsetms', local_var_params['offsetms']))  # noqa: E501
        if 'skipms' in local_var_params and local_var_params['skipms'] is not None:  # noqa: E501
            query_params.append(('skipms', local_var_params['skipms']))  # noqa: E501
        if 'playback_id' in local_var_params and local_var_params['playback_id'] is not None:  # noqa: E501
            query_params.append(('playbackId', local_var_params['playback_id']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "Playback",
        }

        return self.api_client.call_api(
            '/bridges/{bridgeId}/play', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_post(self, bridge_id, **kwargs):  # noqa: E501
        """Create a new bridge or updates an existing one.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_post(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Unique ID to give to the bridge being created. (required)
        :type bridge_id: str
        :param type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu) to set.
        :type type: str
        :param name: Set the name of the bridge.
        :type name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Bridge
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_post_with_http_info(bridge_id, **kwargs)  # noqa: E501

    def bridges_bridge_id_post_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Create a new bridge or updates an existing one.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_post_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Unique ID to give to the bridge being created. (required)
        :type bridge_id: str
        :param type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu) to set.
        :type type: str
        :param name: Set the name of the bridge.
        :type name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Bridge, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'type',
            'name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "Bridge",
        }

        return self.api_client.call_api(
            '/bridges/{bridgeId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_record_post(self, bridge_id, name, format, **kwargs):  # noqa: E501
        """Start a recording.  # noqa: E501

        This records the mixed audio from all channels participating in this bridge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_record_post(bridge_id, name, format, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param name: Recording's filename (required)
        :type name: str
        :param format: Format to encode audio in (required)
        :type format: str
        :param max_duration_seconds: Maximum duration of the recording, in seconds. 0 for no limit.
        :type max_duration_seconds: int
        :param max_silence_seconds: Maximum duration of silence, in seconds. 0 for no limit.
        :type max_silence_seconds: int
        :param if_exists: Action to take if a recording with the same name already exists.
        :type if_exists: str
        :param beep: Play beep when recording begins
        :type beep: bool
        :param terminate_on: DTMF input to terminate recording.
        :type terminate_on: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LiveRecording
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_record_post_with_http_info(bridge_id, name, format, **kwargs)  # noqa: E501

    def bridges_bridge_id_record_post_with_http_info(self, bridge_id, name, format, **kwargs):  # noqa: E501
        """Start a recording.  # noqa: E501

        This records the mixed audio from all channels participating in this bridge.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_record_post_with_http_info(bridge_id, name, format, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param name: Recording's filename (required)
        :type name: str
        :param format: Format to encode audio in (required)
        :type format: str
        :param max_duration_seconds: Maximum duration of the recording, in seconds. 0 for no limit.
        :type max_duration_seconds: int
        :param max_silence_seconds: Maximum duration of silence, in seconds. 0 for no limit.
        :type max_silence_seconds: int
        :param if_exists: Action to take if a recording with the same name already exists.
        :type if_exists: str
        :param beep: Play beep when recording begins
        :type beep: bool
        :param terminate_on: DTMF input to terminate recording.
        :type terminate_on: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LiveRecording, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'name',
            'format',
            'max_duration_seconds',
            'max_silence_seconds',
            'if_exists',
            'beep',
            'terminate_on',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_record_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_record_post`")  # noqa: E501
        # verify the required parameter 'name' is set
        if self.api_client.client_side_validation and ('name' not in local_var_params or  # noqa: E501
                                                        local_var_params['name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `name` when calling `bridges_bridge_id_record_post`")  # noqa: E501
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in local_var_params or  # noqa: E501
                                                        local_var_params['format'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `format` when calling `bridges_bridge_id_record_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'format' in local_var_params and local_var_params['format'] is not None:  # noqa: E501
            query_params.append(('format', local_var_params['format']))  # noqa: E501
        if 'max_duration_seconds' in local_var_params and local_var_params['max_duration_seconds'] is not None:  # noqa: E501
            query_params.append(('maxDurationSeconds', local_var_params['max_duration_seconds']))  # noqa: E501
        if 'max_silence_seconds' in local_var_params and local_var_params['max_silence_seconds'] is not None:  # noqa: E501
            query_params.append(('maxSilenceSeconds', local_var_params['max_silence_seconds']))  # noqa: E501
        if 'if_exists' in local_var_params and local_var_params['if_exists'] is not None:  # noqa: E501
            query_params.append(('ifExists', local_var_params['if_exists']))  # noqa: E501
        if 'beep' in local_var_params and local_var_params['beep'] is not None:  # noqa: E501
            query_params.append(('beep', local_var_params['beep']))  # noqa: E501
        if 'terminate_on' in local_var_params and local_var_params['terminate_on'] is not None:  # noqa: E501
            query_params.append(('terminateOn', local_var_params['terminate_on']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "LiveRecording",
        }

        return self.api_client.call_api(
            '/bridges/{bridgeId}/record', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_remove_channel_post(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Remove a channel from a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_remove_channel_post(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param channel: Ids of channels to remove from bridge (required)
        :type channel: list[str]
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_remove_channel_post_with_http_info(bridge_id, channel, **kwargs)  # noqa: E501

    def bridges_bridge_id_remove_channel_post_with_http_info(self, bridge_id, channel, **kwargs):  # noqa: E501
        """Remove a channel from a bridge.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_remove_channel_post_with_http_info(bridge_id, channel, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param channel: Ids of channels to remove from bridge (required)
        :type channel: list[str]
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'channel',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_remove_channel_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_remove_channel_post`")  # noqa: E501
        # verify the required parameter 'channel' is set
        if self.api_client.client_side_validation and ('channel' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel` when calling `bridges_bridge_id_remove_channel_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []
        if 'channel' in local_var_params and local_var_params['channel'] is not None:  # noqa: E501
            query_params.append(('channel', local_var_params['channel']))  # noqa: E501
            collection_formats['channel'] = 'multi'  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/bridges/{bridgeId}/removeChannel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_video_source_channel_id_post(self, bridge_id, channel_id, **kwargs):  # noqa: E501
        """Set a channel as the video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_video_source_channel_id_post(bridge_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param channel_id: Channel's id (required)
        :type channel_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_video_source_channel_id_post_with_http_info(bridge_id, channel_id, **kwargs)  # noqa: E501

    def bridges_bridge_id_video_source_channel_id_post_with_http_info(self, bridge_id, channel_id, **kwargs):  # noqa: E501
        """Set a channel as the video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_video_source_channel_id_post_with_http_info(bridge_id, channel_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param channel_id: Channel's id (required)
        :type channel_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'channel_id',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_video_source_channel_id_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_video_source_channel_id_post`")  # noqa: E501
        # verify the required parameter 'channel_id' is set
        if self.api_client.client_side_validation and ('channel_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['channel_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `channel_id` when calling `bridges_bridge_id_video_source_channel_id_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501
        if 'channel_id' in local_var_params:
            path_params['channelId'] = local_var_params['channel_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/bridges/{bridgeId}/videoSource/{channelId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_bridge_id_video_source_delete(self, bridge_id, **kwargs):  # noqa: E501
        """Removes any explicit video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants. When no explicit video source is set, talk detection will be used to determine the active video stream.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_video_source_delete(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_bridge_id_video_source_delete_with_http_info(bridge_id, **kwargs)  # noqa: E501

    def bridges_bridge_id_video_source_delete_with_http_info(self, bridge_id, **kwargs):  # noqa: E501
        """Removes any explicit video source in a multi-party mixing bridge. This operation has no effect on bridges with two or fewer participants. When no explicit video source is set, talk detection will be used to determine the active video stream.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_bridge_id_video_source_delete_with_http_info(bridge_id, async_req=True)
        >>> result = thread.get()

        :param bridge_id: Bridge's id (required)
        :type bridge_id: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'bridge_id',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_bridge_id_video_source_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'bridge_id' is set
        if self.api_client.client_side_validation and ('bridge_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['bridge_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `bridge_id` when calling `bridges_bridge_id_video_source_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bridge_id' in local_var_params:
            path_params['bridgeId'] = local_var_params['bridge_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/bridges/{bridgeId}/videoSource', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_get(self, **kwargs):  # noqa: E501
        """List all active bridges in Asterisk.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_get(async_req=True)
        >>> result = thread.get()

        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[Bridge]
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_get_with_http_info(**kwargs)  # noqa: E501

    def bridges_get_with_http_info(self, **kwargs):  # noqa: E501
        """List all active bridges in Asterisk.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[Bridge], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "list[Bridge]",
        }

        return self.api_client.call_api(
            '/bridges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def bridges_post(self, **kwargs):  # noqa: E501
        """Create a new bridge.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_post(async_req=True)
        >>> result = thread.get()

        :param type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu).
        :type type: str
        :param bridge_id: Unique ID to give to the bridge being created.
        :type bridge_id: str
        :param name: Name to give to the bridge being created.
        :type name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Bridge
        """
        kwargs['_return_http_data_only'] = True
        return self.bridges_post_with_http_info(**kwargs)  # noqa: E501

    def bridges_post_with_http_info(self, **kwargs):  # noqa: E501
        """Create a new bridge.  # noqa: E501

        This bridge persists until it has been shut down, or Asterisk has been shut down.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bridges_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param type: Comma separated list of bridge type attributes (mixing, holding, dtmf_events, proxy_media, video_sfu).
        :type type: str
        :param bridge_id: Unique ID to give to the bridge being created.
        :type bridge_id: str
        :param name: Name to give to the bridge being created.
        :type name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Bridge, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'type',
            'bridge_id',
            'name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method bridges_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in local_var_params and local_var_params['type'] is not None:  # noqa: E501
            query_params.append(('type', local_var_params['type']))  # noqa: E501
        if 'bridge_id' in local_var_params and local_var_params['bridge_id'] is not None:  # noqa: E501
            query_params.append(('bridgeId', local_var_params['bridge_id']))  # noqa: E501
        if 'name' in local_var_params and local_var_params['name'] is not None:  # noqa: E501
            query_params.append(('name', local_var_params['name']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "Bridge",
        }

        return self.api_client.call_api(
            '/bridges', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
