# coding: utf-8

"""
    localhost:8088

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 5.1.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wazo_appgateway_client.api_client import ApiClient
from wazo_appgateway_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class RecordingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def recordings_live_recording_name_delete(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and discard it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_live_recording_name_delete_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_live_recording_name_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and discard it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/recordings/live/{recordingName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_live_recording_name_get(self, recording_name, **kwargs):  # noqa: E501
        """List live recordings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_get(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: LiveRecording
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_live_recording_name_get_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_live_recording_name_get_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """List live recordings.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_get_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(LiveRecording, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "LiveRecording",
        }

        return self.api_client.call_api(
            '/recordings/live/{recordingName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_live_recording_name_mute_delete(self, recording_name, **kwargs):  # noqa: E501
        """Unmute a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_mute_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_live_recording_name_mute_delete_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_live_recording_name_mute_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Unmute a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_mute_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_mute_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_mute_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/mute', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_live_recording_name_mute_post(self, recording_name, **kwargs):  # noqa: E501
        """Mute a live recording.  # noqa: E501

        Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_mute_post(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_live_recording_name_mute_post_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_live_recording_name_mute_post_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Mute a live recording.  # noqa: E501

        Muting a recording suspends silence detection, which will be restarted when the recording is unmuted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_mute_post_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_mute_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_mute_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/mute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_live_recording_name_pause_delete(self, recording_name, **kwargs):  # noqa: E501
        """Unpause a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_pause_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_live_recording_name_pause_delete_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_live_recording_name_pause_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Unpause a live recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_pause_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_pause_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_pause_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/pause', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_live_recording_name_pause_post(self, recording_name, **kwargs):  # noqa: E501
        """Pause a live recording.  # noqa: E501

        Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_pause_post(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_live_recording_name_pause_post_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_live_recording_name_pause_post_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Pause a live recording.  # noqa: E501

        Pausing a recording suspends silence detection, which will be restarted when the recording is unpaused. Paused time is not included in the accounting for maxDurationSeconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_pause_post_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_pause_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_pause_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/pause', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_live_recording_name_stop_post(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and store it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_stop_post(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_live_recording_name_stop_post_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_live_recording_name_stop_post_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Stop a live recording and store it.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_live_recording_name_stop_post_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_live_recording_name_stop_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_live_recording_name_stop_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/recordings/live/{recordingName}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_stored_get(self, **kwargs):  # noqa: E501
        """List recordings that are complete.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_get(async_req=True)
        >>> result = thread.get()

        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: list[StoredRecording]
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_stored_get_with_http_info(**kwargs)  # noqa: E501

    def recordings_stored_get_with_http_info(self, **kwargs):  # noqa: E501
        """List recordings that are complete.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(list[StoredRecording], status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "list[StoredRecording]",
        }

        return self.api_client.call_api(
            '/recordings/stored', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_stored_recording_name_copy_post(self, recording_name, destination_recording_name, **kwargs):  # noqa: E501
        """Copy a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_copy_post(recording_name, destination_recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording to copy (required)
        :type recording_name: str
        :param destination_recording_name: The destination name of the recording (required)
        :type destination_recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StoredRecording
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_stored_recording_name_copy_post_with_http_info(recording_name, destination_recording_name, **kwargs)  # noqa: E501

    def recordings_stored_recording_name_copy_post_with_http_info(self, recording_name, destination_recording_name, **kwargs):  # noqa: E501
        """Copy a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_copy_post_with_http_info(recording_name, destination_recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording to copy (required)
        :type recording_name: str
        :param destination_recording_name: The destination name of the recording (required)
        :type destination_recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StoredRecording, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'destination_recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_copy_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_copy_post`")  # noqa: E501
        # verify the required parameter 'destination_recording_name' is set
        if self.api_client.client_side_validation and ('destination_recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['destination_recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `destination_recording_name` when calling `recordings_stored_recording_name_copy_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []
        if 'destination_recording_name' in local_var_params and local_var_params['destination_recording_name'] is not None:  # noqa: E501
            query_params.append(('destinationRecordingName', local_var_params['destination_recording_name']))  # noqa: E501

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "StoredRecording",
        }

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}/copy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_stored_recording_name_delete(self, recording_name, **kwargs):  # noqa: E501
        """Delete a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_delete(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_stored_recording_name_delete_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_stored_recording_name_delete_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Delete a stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_delete_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_stored_recording_name_file_get(self, recording_name, **kwargs):  # noqa: E501
        """Get the file associated with the stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_file_get(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_stored_recording_name_file_get_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_stored_recording_name_file_get_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Get the file associated with the stored recording.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_file_get_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_file_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_file_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "str",
        }

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}/file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def recordings_stored_recording_name_get(self, recording_name, **kwargs):  # noqa: E501
        """Get a stored recording's details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_get(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: StoredRecording
        """
        kwargs['_return_http_data_only'] = True
        return self.recordings_stored_recording_name_get_with_http_info(recording_name, **kwargs)  # noqa: E501

    def recordings_stored_recording_name_get_with_http_info(self, recording_name, **kwargs):  # noqa: E501
        """Get a stored recording's details.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.recordings_stored_recording_name_get_with_http_info(recording_name, async_req=True)
        >>> result = thread.get()

        :param recording_name: The name of the recording (required)
        :type recording_name: str
        :param x_asterisk_id:
        :type x_asterisk_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(StoredRecording, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'recording_name',
            'x_asterisk_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method recordings_stored_recording_name_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'recording_name' is set
        if self.api_client.client_side_validation and ('recording_name' not in local_var_params or  # noqa: E501
                                                        local_var_params['recording_name'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `recording_name` when calling `recordings_stored_recording_name_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'recording_name' in local_var_params:
            path_params['recordingName'] = local_var_params['recording_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_asterisk_id' in local_var_params:
            header_params['X-Asterisk-ID'] = local_var_params['x_asterisk_id']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "StoredRecording",
        }

        return self.api_client.call_api(
            '/recordings/stored/{recordingName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
